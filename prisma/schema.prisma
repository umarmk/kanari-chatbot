generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  passwordHash  String?
  createdAt     DateTime       @default(now())
  oauthAccounts OauthAccount[]
  sessions      Session[]
  projects      Project[]
  files         File[]
  chats         Chat[]
  messages      Message[]
}

model OauthAccount {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @db.Uuid
  provider        String
  providerUserId  String
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
}

model Session {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @db.Uuid
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  metadata         Json?
  refreshTokenHash String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Project {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @db.Uuid
  name         String
  systemPrompt String?
  model        String?
  params       Json?
  createdAt    DateTime  @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  files  File[]
  chats  Chat[]

  @@index([userId])
}

model File {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @db.Uuid
  userId     String   @db.Uuid
  name       String
  mime       String
  size       Int
  storageUrl String
  createdAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @db.Uuid
  userId    String   @db.Uuid
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([projectId])
  @@index([userId])
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid
  userId    String   @db.Uuid
  role      String
  content   String
  createdAt DateTime @default(now())
  meta      Json?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([userId])
}

